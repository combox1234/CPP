/*Consider the playlist in a music player. Implement a playlist feature in music player application
using singly linked list. Each song in the playlist is represented as a node in the linked list. Each
node contains information about the song (such as title or artist or duration, etc.).
The playlist should allow users to:
a. Add songs
b. Remove songs
c. Display the entire playlist
d. Play specific songs*/
#include<iostream>
#include<string>
using namespace std;

// Node class to represent a song in the playlist
class Node {
public:
    string title; // song title
    Node* next; // pointer to the next node
    Node(string title) {
        this->title = title;
        this->next = NULL;
    }
};

// Playlist class to manage the playlist
class Playlist {
public:
    Node* head; // head of the playlist
    Playlist() {
        this->head = NULL;
    }

    // Add a new song to the playlist
    void insert_node(string title) {
        // Create a new node with the given title
        Node* nn = new Node(title);
        
        // Set the next pointer of the new node to the current head of the playlist
        nn->next = head;
        
        // Update the head of the playlist to point to the new node
        head = nn;
    }

    // Remove a song from the playlist
    void delete_node(string song) {
        // Check if the playlist is empty
        if (head == NULL) {
            cout << "song not found in the queue" << endl;
            return;
        }
        // Check if the song to be deleted is the head node
        if (head->title == song) {
            // Store the head node in a temporary pointer
            Node* temp = head;
            
            // Update the head of the playlist to point to the next node
            head = head->next;
            
            // Delete the head node
            delete temp;
            
            // Print a confirmation message
            cout << "deleted\n";
            return;
        }
        // Find the node to be deleted
        Node* temp = head;
        while (temp->next != NULL && temp->next->title != song) {
            temp = temp->next;
        } 
        // Check if the song is not found
        if (temp->next == NULL) {
            cout << "song not found in the queue" << endl;
            return;
        }

        // Store the node to be deleted in a temporary pointer
        Node* nodeToDelete = temp->next;
        
        // Update the next pointer of the previous node to skip the node to be deleted
        temp->next = temp->next->next;
        
        // Delete the node
        delete nodeToDelete;
        
        // Print a confirmation message
        cout << "deleted\n";
    }

    // Display the entire playlist
    void show_track() {
        // Start from the head node
        Node* temp = head;
        
        // Traverse the playlist and print the title of each song
        while (temp != NULL) {
            cout << "title: " << temp->title << endl;
            temp = temp->next;
        }
        
        // Check if the playlist is empty
        if (temp == NULL) {
            cout << "no song";
        }
    }

    // Insert a song at a specific position
    void insert_at_position(int position, string title) {
        // Create a new node with the given title
        Node* nn = new Node(title);
        
        // Check if the position is 1
        if (position == 1) {
            // Set the next pointer of the new node to the current head of the playlist
            nn->next = head;
            
            // Update the head of the playlist to point to the new node
            head = nn;
        } else {
            // Find the node at the specified position
            Node* temp = head;
            int i = 1;
            while (temp != NULL && i < position - 1) {
                temp = temp->next;
                i++;
            }
            
            // Check if the position is out of range
            if (temp == NULL) {
                cout << "unable to allocate this position" << endl;
                return;
            }
            
            // Set the next pointer of the new node to the next node at the specified position
            nn->next = temp->next;
            
            // Update the next pointer of the previous node to point to the new node
            temp->next = nn;
        }
    }
};

int main() {
    Playlist queue;
    int choice;
    string song;
    string title;
    int position;
    do {
        cout << "....................................................\n1. Enter track\n2. Add song at a position\n3. remove a song\n4. diplay track\n5. exit\n....................................................\nEnter your choice:";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter song title: ";
                cin >> title;
                queue.insert_node(title);
                break;
            case 2:
                cout << "Enter position: ";
                cin >> position;
                cout << "Enter song title: ";
                cin >> title;
                queue.insert_at_position(position, title);
                break;
            case 3:
                cout << "Enter song title to remove: ";
                cin >> song;
                queue.delete_node(song);
                break;
            case 4:
                queue.show_track();
                break;
            case 5:
                return 0;
            default:
                cout << "please try again" << endl;
        }
    } while (true);

    return 0;
}
